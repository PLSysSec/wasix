#!/usr/bin/env python3

import argparse
import time
import os

from Config import getConfig
from Executor import Execute
from Checker import Check
from TestGen import TestGen


def get_args():
    parser = argparse.ArgumentParser(description='A differential testing tool for WASI-compatible WASM runtimes')

    task = parser.add_mutually_exclusive_group(required=True)
    task.add_argument("--gen", action="store_true", help="generate tests")
    task.add_argument("--run", action="store_true", help="run tests and generate trace files")
    task.add_argument("--check", action="store_true", help="compare trace files")
    task.add_argument("--all", action="store_true", help="gen, run, and check; needs all other flags defined")

    parser.add_argument("--num", help="number of tests")
    parser.add_argument("--size", help="size of each test")

    parser.add_argument("--test_dir", help="where wasm tests are/should be located")
    parser.add_argument("--trace_dir", help="where traces file are/should be located")
    parser.add_argument("--os", help="the name of current os")

    args = parser.parse_args()
    return args

def generate_tests(num, size, test_dir, config):
  print("Generating {} tests with size {} at {}".format(num, size, test_dir))
  start_time = time.time()
  TestGen(num, size, test_dir, config)
  end_time = time.time()
  print("@Test Gen time:%.6f"%(end_time-start_time))

def run_tests(test_dir, trace_dir, os, config):
  print("Running tests")
  Execute(test_dir, trace_dir, config["runtimes"], os, config)

def check_traces(trace_dir):
  print("Checking {}...".format(trace_dir))
  fn = Check(trace_dir)
  print("Report written to {}".format(fn))

def main():
  args = get_args()
  config = getConfig()
  if args.test_dir: args.test_dir = os.path.abspath(args.test_dir)
  if args.trace_dir: args.trace_dir = os.path.abspath(args.trace_dir)
  if args.gen:
    generate_tests(int(args.num), int(args.size), args.test_dir, config)
  elif args.run:
    run_tests(args.test_dir, args.trace_dir, args.os, config)
  elif args.check:
    check_traces(args.trace_dir)
  elif args.all:
    generate_tests(int(args.num), int(args.size), args.test_dir, config)
    run_tests(args.test_dir, args.trace_dir, args.os, config)
    check_traces(args.trace_dir)

if __name__ == "__main__":
  main()
