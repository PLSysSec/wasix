#!/usr/bin/env python3.8

import argparse
import secrets
import subprocess
import os
from Executor import Execute

from TestGen import TestGen
from CodeGen import CodeGen

def get_args():
    parser = argparse.ArgumentParser(description='A differential testing tool for WASI-compatible WASM runtimes')

    task = parser.add_mutually_exclusive_group(required=True)
    task.add_argument("--gen", action="store_true", help="generate tests")
    task.add_argument("--run", action="store_true", help="run tests and generate trace files")
    task.add_argument("--check", action="store_true", help="compare trace files")

    parser.add_argument("--num", help="number of tests")
    parser.add_argument("--size", help="size of each test")
    parser.add_argument("--dir", help="destination to put tests")

    parser.add_argument("--test_dir", help="where wasm tests are located")
    parser.add_argument("--trace_dir", help="where traces file are/should be located")
    parser.add_argument("--os", help="the name of current os")

    parser.add_argument("other_args", nargs="*", help="compare trace files")

    args = parser.parse_args()
    return args

def generate_tests(num, size, dir):
  config = {
    "files": [
      {"path": "small.txt", "permission": "O_RDWR"},
      {"path": "small.txt", "permission": "O_RDONLY"},
      {"path": "medium.txt", "permission": "O_RDWR"},
      {"path": "large.txt", "permission": "O_RDWR"},
      {"path": "not_exist.txt", "permission": "O_RDWR"},
    ],
    "env": ["ENV_VAR_1", "ENV_VAR_2"]
  }
  for i in range(num):
    blocks = TestGen(config, size)
    print("Generated test#{}:".format(i))

    n = secrets.token_hex(8)
    fn ="{}/{}.c".format(dir, n)
    f = open(fn, "w")
    f.write(CodeGen(blocks, n))
    f.flush()
    print("Stored into {}".format(fn))

    wn = "{}/{}.wasm".format(dir, n)
    sdk = os.getenv('WASI_SDK_PATH')
    bin = "{}/bin/clang".format(sdk)
    root = "--sysroot={}/share/wasi-sysroot".format(sdk)
    cmd = [bin, root, fn, "-o", wn]
    # print(" ".join(cmd))
    p = subprocess.run([bin, root, fn, "-o", wn], universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # print(p.stdout)
    # print(p.stderr)
    print("Compiled to {}".format(wn))

  # for b in blocks:
  #   print("\t{}".format(b.getID()))


def run_tests(test_dir, trace_dir, os):
  runtimes = ["wasmtime", "wasmer"]
  Execute(test_dir, trace_dir, runtimes, os, None)

def main():
  args = get_args()
  if args.gen:
    print("Generating {} tests with size {} at {}".format(args.num, args.size, args.dir))
    generate_tests(int(args.num), int(args.size), args.dir)
  elif args.run:
    print("Running tests")
    run_tests(args.test_dir, args.trace_dir, args.os)
  elif args.check:
    print("Checking traces")

if __name__ == "__main__":
  main()
